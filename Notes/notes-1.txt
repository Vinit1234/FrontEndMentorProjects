## Git

Git is the most commonly used version control system for web development projects. 
It helps developers save and track changes in their code, allowing them to go back 
to previous versions if needed. 
It also supports collaboration, enabling multiple people to work on the same project.

>> Git fundamentals:
https://www.epicweb.dev/tutorials/git-fundamentals/commands/intro-to-git-fundamentals

>> Git, GitHub, & GitHub Desktop for beginners: This is 20-minute tutorial:
https://www.youtube.com/watch?v=8Dd7KRpKeaE

>> Pro git book:
https://git-scm.com/book/en/v2

https://git-scm.com/docs


=================================================================================

## Responsive Images
Ref: https://web.dev/learn/design/responsive-images

img {
  max-inline-size: 100%;
  block-size: auto;
  aspect-ratio: 2/1;
  object-fit: cover|contain|cover;
  object-position: top center;
}


<img
 src="image.png"
 alt="A description of the image."
 loading="lazy"
>

<img
 src="hero.jpg"
 alt="A description of the image."
 loading="eager"
 fetchpriority="high"
>


>> preloading

It's best to avoid preloading whenever possible by including
 all images in the initial HTML file. However, some images may be unavailable,
  such as images added by JavaScript or a CSS background image.

You can use preloading to get the browser to fetch these important images ahead of time.
 For really important images, you can combine this preloading with the fetchpriority attribute:

<link rel="preload" href="hero.jpg" as="image" fetchpriority="high">


NOTE: Again, use these attributes sparingly to avoid overriding the browser's prioritization 
heuristics too often. Overusing them can cause performance degradation.

Some browsers support preloading responsive images based on srcset, using the imagesrcset and imagesizes attributes. 
For example:

<link rel="preload" imagesrcset="hero_sm.jpg 1x hero_med.jpg 2x hero_lg.jpg 3x" as="image" fetchpriority="high">

By excluding the href fallback, you can make sure browsers without srcset support still preload the correct image.

<img
 src="image.png"
 alt="A description of the image."
 loading="lazy"
 decoding="async"
>

<img
 src="hero.jpg"
 alt="A description of the image."
 loading="eager"
 decoding="sync"
>


>> Responsive images with srcset

 Add multiple versions of the same image at different sizes,
  and use the srcset attribute to tell the browser these sizes exist and when to use them.

    1. Width descriptor
        <img
         src="small-image.png"
         alt="A description of the image."
         loading="lazy"
         decoding="async"
         srcset="small-image.png 300w,
          medium-image.png 600w,
          large-image.png 1200w"
        >

    2. Sizes
    
    <img
      src="small-image.png"
      alt="A description of the image."
      width="300"
      height="200"
      loading="lazy"
      decoding="async"
      srcset="small-image.png 300w,
       medium-image.png 600w,
       large-image.png 1200w"
      sizes="(min-width: 66em) 33vw,
       (min-width: 44em) 50vw,
       100vw"
    >


    3. Pixel density descriptor

    <img
       src="small-image.png"
       alt="A description of the image."
       width="300"
       height="200"
       loading="lazy"
       decoding="async"
       srcset="small-image.png 1x,
        medium-image.png 2x,
        large-image.png 3x"
      >

======================================================
## Flexbox
Ref: https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/

Best layout ref: 
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_grid_layout/Realizing_common_layouts_using_grids


1.
https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#the-minimum-size-gotcha-11

 flex-shrink has a default value of 1, and we haven't removed it, 
 so the search input should be able to shrink as much as it needs to! 
 Why is it refusing to shrink?

Here's the deal: The Flexbox algorithm refuses to shrink a child below its minimum size. 
The content will overflow rather than shrink further, no matter how high we crank flex-shrink!

Text inputs have a default minimum size of 170px-200px 
(it varies between browsers). That's the limitation we're running into above.

By setting :

min-width: 0px

directly on the Flex child, we tell the Flexbox algorithm to 
overwrite the “built-in” minimum width. 
Because we've set it to 0px, the element can shrink as much as necessary.

Proceed with caution

It's worth noting that the built-in minimum size does serve a purpose. It's meant to act as a guardrail, to prevent something even worse from happening.

For example: when we apply min-width: 0px to our text-containing Flex children, things break in an even worse way:


2.align-content property:

https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/#wrapping-14


======================================================
## Grid

Grid Layout Guide:
https://css-tricks.com/snippets/css/complete-guide-grid/

>> Grid areas
https://www.joshwcomeau.com/css/interactive-guide-to-grid/#grid-areas-7

>> Sequence of child items when tab i hit:
https://www.joshwcomeau.com/css/interactive-guide-to-grid/#being-mindful-of-keyboard-users-8


>> justify-content vs justify-items in grid
https://www.joshwcomeau.com/css/interactive-guide-to-grid/#alignment-9


>> Justifying and Aligning in Grid:
https://www.joshwcomeau.com/css/interactive-guide-to-grid/#aligning-rows-10


>> Full-Bleed Layout Using CSS Grid
https://www.joshwcomeau.com/css/full-bleed/
https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline


<main class="wrapper">
  <h1>Some Heading</h1>
  <p>Some content and stuff</p>
  <img class="full-bleed" alt="cute meerkat" src="/meerkat.jpg" />
</main> 

.wrapper {
  display: grid;
  grid-template-columns: 1fr min(42rem, 100%) 1fr;
  padding-inline: 16px;
}

.full-bleed {
  grid-column: 1 / -1;
}
-----------------------------------------------------------------

>> Centering child element in Grid using only 2 CSS properties
.parent{
  display:grid;
  place-holder:center;
}